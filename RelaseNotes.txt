【GASHAバージョン更新履歴】
--------------------------------------------------------------------------------
■Ver.2.00 [master] Aug.10.2014 M.Itagaki
  ・一部互換性に影響する変更があるため、メジャーバージョンを更新。
  ・以下の処理を追加。
    【情報アクセス系】
    - 名前付きデータ参照
    - 名前付き関数
    - 名前付き定数
    - 文字列プール
  ・汎用ユーティリティに nvl() 関数を追加。不定長の引数から最初の非nullptrの値
    を返す。
  ・【GCC】コンストラクタ／デストラクタ属性用の以下のマクロを追加。
    - GASHA_CONSTRUCTOR_ATTRIBUTE
    - GASHA_CONSTRUCTOR_ATTRIBUTE_WITH_PRIORITY
    - GASHA_DESTRUCTOR_ATTRIBUTE
    - GASHA_DESTRUCTOR_ATTRIBUTE_WITH_PRIORITY
    これらは、main() 関数実行前後に任意の関数を実行するために使用する属性。静的
    変数の初期化順序の設定にも利用可能。
    属性が使用可能かどうかは、下記のマクロで判定可能。
    - GASHA_HAS_CONSTRUCTOR_ATTRIBUTE
    - GASHA_HAS_CONSTRUCTOR_ATTRIBUTE_WITH_PRIORITY
    - GASHA_HAS_DESTRUCTOR_ATTRIBUTE
    - GASHA_HAS_DESTRUCTOR_ATTRIBUTE_WITH_PRIORITY
  ・基本算術処理に、基本演算用のテンプレート関数を追加。演算のポリシー化に活用
    できるように、引数を統一化した関数も用意。また、加算／減算／乗算処理は、ラ
    ップアラウンド演算と飽和演算にも対応。
  ・プロファイラのロックポリシーをビルド設定で変更できるように変更。
  ・プロファイラ内でスレッド名／処理名を記録する処理を、文字列プールクラスを使
    用する処理に変更。
  ・【互換性に影響あり】動的配列、リングバッファ、双方向連結リスト、片方向連結
    リストの探索系メソッドを const メンバー関数に変更。
  ・【互換性に影響あり】開番地法ハッシュテーブル、二分ヒープ、優先度付きキュー
    のテーブルサイズ指定方法を、テンプレート引数指定から、操作用構造体での指定
    に変更。優先度付きキューの場合、コンテナクラスの指定も同様に変更。
  ・【互換性に影響あり】タグ用構造体の名称を「***_type」から「***_tag」に変更。
    該当するのは、stdColor_tag, explicitInit_tag
  ・【互換性に影響あり】コンテキストスイッチのタグ名を変更。
      - force_switch_t → forceContextSwitch_tag
      - short_sleep_switch_t → shortSleepContextSwitch_tag
      - yield_switch_t → yieldContextSwitch_tag
      - zeroSleepContextSwitch_tag（追加）
  ・シングルトンのインスタンスを、クラスのアラインメントに合わせたアドレスに配
    置するように修正。その代わり、アライメントサイズ分の領域を余計に確保する状
    態に変更。
  ・CRC32計算で、nullptrが渡された場合に 0 を返すように修正。
  ・開番地法ハッシュテーブルの emplace() / emplaceAuto() メソッドが、コンストラ
    クタ呼び出し時の引数のフォワードが不完全だった不具合を修正（std::forward() 
    を使用していなかった）。
  ・ビルド設定で赤黒木のランダムイテレータを無効化した時にコンパイルエラーにな
    る不具合を修正。
  ・ビルド設定で片方向連結リストのランダムアクセスを無効化すると、シリアライズ
    のサンプルプログラムでコンパイルエラーになる不具合を修正。
  ・ビルド設定でデバッグログを無効にすると、デバッグログのサンプルプログラムで
    コンパイルエラーになる不具合を修正。
  ・ビルド設定で各種アロケータの *.cpp.h ファイルの暗黙的インクルードを無効化
    すると、アロケータのサンプルプログラムでリンクエラーになる不具合を修正。
    コンパイルエラーになる不具合を修正。
  ・【VC++】ビルド設定でデバッグログを無効にすると、ライブラリのリンク時に警告
    が出る問題を修正。
  ・ロック型の指定箇所など「ポリシー」としての設定箇所に対して、「ポリシー」と
    いう用語を伴う説明文を添えるように、全般的にコメントを修正。
--------------------------------------------------------------------------------
■Ver.1.01 [master] Jul.28.2014 M.Itagaki
  ・64bit GCC環境に対応。
    - 各処理にて、型チェックを厳密に。
        ⇒ printf() の %d 書式指定に std::size_t 型の値を渡す際に int 型にキャ
           ストするなど。
    - uname -a の結果に基づいて、ビルドターゲット（x86, x64）を決定するように
      変更。
        ⇒ uname -a の中に、WOW64 が入っていたら x86, x86_64 が入っていたら x64
           のビルドを行う。
  ・GCC 4.7環境に対応。
    - 三項演算子に static const 定数を用いると、ポインタ参照されて直値化されず、
      リンクエラーになってしまうことがある問題に対処。
        ⇒ ローカル変数に移し替えて処理。
    - std::this_thread::sleep(), std::this_thread::yeild() が使用できない問題に
      対処。
        ⇒ コンパイルオプションに -D_GLIBCXX_USE_NANOSLEEP, 
            -D_GLIBCXX_USE_SCHED_YIELD を追加。
  ・シングルトン対象クラスのコンストラクタを private/protected 化できるように、
    GASHA 専用の is_default_constructible / is_constructible を作成。
        ⇒ コンストラクタを非publicにしてシングルトンクラスをフレンド化すること
           で、シングルトン専用のクラスを定義できるようにする。
           これまでは、コンストラクタ引数を伴うクラスだけがシングルトン専用クラ
           スにできたが、今回の対応でデフォルトコンストラクタしかない場合も扱え
           るようになった。
  ・デバッグログ用のサンプルプログラムを改訂。
        ⇒ 他のTTY出力振り分けテストで、これまでは Cygwin の /dev/pty* にのみ
           対応していたが、Linux の /dev/pts/* にも対応。
--------------------------------------------------------------------------------
■Ver.1.00 [master] Jul.26.2014 M.Itagaki
  ・初回リリース
    以下、収録プログラム
    【環境系】
    - ビルド設定
    【ユーティリティ系】
    - 汎用ユーティリティ
    - 型特性ユーティリティ
    - 限界値ユーティリティ
    - 時間処理ユーティリティ
    - CPU情報取得処理
    【算術系：基本】
    - 基本算術
    - 高速算術
    【算術系：CRC計算】
    - CRC32計算
    【文字列系】
    - 文字列処理
    - 高速文字列処理
    【アルゴリズム系：ソート】
    - バブルソート
    - シェーカーソート
    - 奇遇転置ソート
    - シェアソート
    - コムソート
    - ノームソート
    - クイックソート
    - 選択ソート
    - ヒープソート
    - 挿入ソート
    - シェルソート
    - インプレースマージソート
    - イントロソート
    - 基数ソート
    - 整列状態確認
    【アルゴリズム系：探索】
    - 線形探索
    - 二分探索
    【マルチスレッド系：基本】
    - スレッドID
    【マルチスレッド系：ロック制御】
    - スピンロック
    - サイズ軽量スピンロック
    - ダミーロック
    - スコープロック
    - 単一ロック
    【マルチスレッド系：共有ロック制御】
    - 共有スピンロック
    - 単純共有スピンロック
    - 非共有スピンロック
    - ダミー共有ロック
    - スコープ共有ロック
    - 単一共有ロック
    【マルチスレッド系：共有データ】
    - ロックフリースタック
    - ロックフリーキュー
    - タグ付きポインタ
    【メモリ操作系：基本】
    - メモリ操作基本（アラインメント付きmalloc/free）
    - アロケータ基本設定・処理（コンストラクタ／デストラクタ呼び出し処理など）
    【メモリ操作系：アロケータ】
    - スタックアロケータ
    - 双方向スタックアロケータ
    - 単一アロケータ
    - プールアロケータ
    - 標準アロケータ
    【メモリ操作系：ロックフリーアロケータ】
    - ロックフリースタックアロケータ
    - ロックフリー双方向スタックアロケータ
    - ロックフリー単一アロケータ
    - ロックフリープールアロケータ
    【メモリ操作系：スコープアロケータ】
    - スコープスタックアロケータ
    - スコープ双方向スタックアロケータ
    【メモリ操作系：アロケータアダプタ】
    - アロケータアダプタインターフェース
    - アロケータアダプタ
    【メモリ操作系：多態アロケータ】
    - 多態アロケータ
    【コンテナ系：疑似コンテナ（外部データコンテナ）】
    - 動的配列
    - リングバッファ
    - 双方向連結リスト
    - 片方向連結リスト
    - 赤黒木（平衡二分探索木）
    【コンテナ系：コンテナ（内部データコンテナ）】
    - 二分ヒープ
    - 開番地法ハッシュテーブル
    【コンテナ系：コンテナアダプタ】
    - 優先度付きキュー
    【デバッグ機能系：デバッグログ】
    - ログ出力操作
    - ログ操作
    - ログ用途
    - ログレベル
    - ログカテゴリ
    - ログレベルマスク
    - ログ属性
    - ログキュー
    - ログワークバッファ
    - ログキューモニター
    【デバッグ機能系：コンソール】
    - コンソールインターフェース
    - TTY端末
    - Windowsコマンドプロンプト
    - Visual Studio 出力ウインドウ
    - ダミーコンソール
    - メモリコンソール
    - 標準コンソール
    - コンソールカラー
    【デバッグ機能系：コールポイント】
    - コールポイント
    【デバッグ機能系：アサーション】
    - アサーション／ブレークポイント／ウォッチポイント
    - デバッガ用ブレークポイント割り込み
    - デバッグポーズインターフェース
    - 標準デバッグポーズ
    - 標準入力デバッグポーズ
    - ダミーデバッグポーズ
    【デバッグ機能系：シンプルアサーション】
    - シンプルアサーション／ブレークポイント／ウォッチポイント
    【デバッグ機能系：プロファイラ】
    - プロファイラ
    【デバッグ機能系：シングルトン系】
    - シングルトン
    - シングルトンデバッグ用処理
    - シングルトンデバッグ用ダミー処理
    【デバッグ機能系：シリアライズ系】
    - シリアライズ
    - アーカイブ基底クラス
    - アーカイブ書き込みクラス
    - アーカイブ読み込みクラス
    - アーカイブアダプタ基底クラス
    - アーカイブ書き込みアダプタクラス
    - アーカイブ読み込みアダプタクラス
    - アーカイブ形式基底クラス
    - バイナリ形式アーカイブ基底クラス
    - テキスト形式アーカイブ基底クラス
    - バイナリ形式アーカイブ書き込みクラス
    - バイナリ形式アーカイブ読み込みクラス
    - テキスト形式アーカイブ書き込みクラス
    - アーカイブ処理結果クラス
